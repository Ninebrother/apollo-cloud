eureka:
  instance:
    #是否使用IP定义注册中心的地址
    prefer-ip-address: true
    status-page-url-path: /swagger-ui.html
  client:
    service-url:
      defaultZone: @eurekaurl@

spring:
  application:
    name: order                     #指定了配置文件的应用名
  profiles:
    active: @spring.profiles.active@
  datasource:
      driver-class-name: com.mysql.jdbc.Driver
      url: jdbc:mysql://127.0.0.1:3306/pay?useUnicode=true&characterEncoding=utf-8&useSSL=false&zeroDateTimeBehavior=convertToNull
      username: root
      password: root
server:
  port: 8089


feign:
  httpclient:
    enabled: false
  okhttp:
    enabled: true
  hystrix:
    enabled: true


#全局设置
ribbon:
  OkToRetryOnAllOperations: false #对所有操作请求都进行重试,默认true
  ReadTimeout: 1000   #负载均衡超时时间，默认值5000
  ConnectTimeout: 3000 #ribbon请求连接的超时时间，默认值2000
  MaxAutoRetries: 0     #对当前实例的重试次数，默认0
  MaxAutoRetriesNextServer: 1 #对切换实例的重试次数，默认1

hystrix:
  command:
    default:  #default全局有效，service id指定应用有效
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 5000 #断路器超时时间，默认1000ms


#1、如果hystrix.command.default.execution.timeout.enabled为false,则熔断器不进行超时熔断,而是根据ribbon的ReadTimeout抛出的异常而熔断,也就是取决于ribbon的ConnectTimeout,配置的是请求服务的超时时间,除非服务找不到,或者网络原因,这个时间才会生效
#2、如果hystrix.command.default.execution.timeout.enabled为true,则会有两个执行方法超时的配置,一个就是ribbon的ReadTimeout,一个就是熔断器hystrix的timeoutInMilliseconds, 此时谁的值小谁生效
#3、为了确保Ribbon重试的时候不被熔断，我们就需要让Hystrix的超时时间大于Ribbon的超时时间，否则Hystrix命令超时后，该命令直接熔断，重试机制就没有任何意义了。建议hystrix的超时时间为:(1 + MaxAutoRetries + MaxAutoRetriesNextServer) * ReadTimeout。
#4、当OkToRetryOnAllOperations设置为false时，只会对get请求进行重试。如果设置成true时，便会对所有请求进行重试，如果时put或post等写操作，如果接口没做幂等性，会产生不好的结果。

mybatis-plus:
  mapper-locations: classpath:mappers/*.xml
  configuration:
      log-prefix: dao.
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl   # logback文件不会生成SQL日志


